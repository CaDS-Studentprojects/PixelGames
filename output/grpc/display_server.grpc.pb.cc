// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: display_server.proto

#include "display_server.pb.h"
#include "display_server.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace LED_display {

static const char* WS2801_Display_method_names[] = {
  "/LED_display.WS2801_Display/DISPLAY_CHANGE",
};

std::unique_ptr< WS2801_Display::Stub> WS2801_Display::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WS2801_Display::Stub> stub(new WS2801_Display::Stub(channel));
  return stub;
}

WS2801_Display::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DISPLAY_CHANGE_(WS2801_Display_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WS2801_Display::Stub::DISPLAY_CHANGE(::grpc::ClientContext* context, const ::LED_display::DISPLAY_MSG& request, ::LED_display::DISPLAY_RESPONSE* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DISPLAY_CHANGE_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::LED_display::DISPLAY_RESPONSE>* WS2801_Display::Stub::AsyncDISPLAY_CHANGERaw(::grpc::ClientContext* context, const ::LED_display::DISPLAY_MSG& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::LED_display::DISPLAY_RESPONSE>::Create(channel_.get(), cq, rpcmethod_DISPLAY_CHANGE_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::LED_display::DISPLAY_RESPONSE>* WS2801_Display::Stub::PrepareAsyncDISPLAY_CHANGERaw(::grpc::ClientContext* context, const ::LED_display::DISPLAY_MSG& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::LED_display::DISPLAY_RESPONSE>::Create(channel_.get(), cq, rpcmethod_DISPLAY_CHANGE_, context, request, false);
}

WS2801_Display::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WS2801_Display_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WS2801_Display::Service, ::LED_display::DISPLAY_MSG, ::LED_display::DISPLAY_RESPONSE>(
          std::mem_fn(&WS2801_Display::Service::DISPLAY_CHANGE), this)));
}

WS2801_Display::Service::~Service() {
}

::grpc::Status WS2801_Display::Service::DISPLAY_CHANGE(::grpc::ServerContext* context, const ::LED_display::DISPLAY_MSG* request, ::LED_display::DISPLAY_RESPONSE* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace LED_display

